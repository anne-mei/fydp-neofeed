[{"/Users/erinroulston/capstone-app/src/index.js":"1","/Users/erinroulston/capstone-app/src/App.js":"2","/Users/erinroulston/capstone-app/src/reportWebVitals.js":"3","/Users/erinroulston/fydp-neofeed/capstone-app/src/index.js":"4","/Users/erinroulston/fydp-neofeed/capstone-app/src/reportWebVitals.js":"5","/Users/erinroulston/fydp-neofeed/capstone-app/src/App.js":"6"},{"size":1939,"mtime":1646292962304,"results":"7","hashOfConfig":"8"},{"size":561,"mtime":1646288315363,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1646190600763,"results":"10","hashOfConfig":"8"},{"size":2131,"mtime":1646354334548,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1646345916749,"results":"13","hashOfConfig":"12"},{"size":528,"mtime":1646345916746,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"o7rkpd",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"1h5u4s9",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/erinroulston/capstone-app/src/index.js",["36"],[],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nconst initialValues = {\n    stomachPressure:\"\",\n    flowrate:\"\"\n};\n\nclass FrontPage extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {value:'', flowRate:''};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    const {value, flowRate} = this.state\n    event.preventDefault()\n    alert(`Stomach pressure submitted: ${value}\\nFlow Rate submitted: ${flowRate}`);\n  }\n\n  handleChange(event){\n    // this.setState({value: event.target.value});\n    this.setState({[event.target.name]:event.target.value\n    })\n  }\n\n\n\n  render() {\n    return (\n   \n        <form onSubmit={this.handleSubmit}>\n             <br></br>\n          <div>\n        <label>Enter baby stomach pressure:</label>\n          <input name='value'  value={this.state.value} onChange={this.handleChange} />\n        </div>\n        <br></br>\n        <br></br>\n        <div>\n        <label>Enter feed flow rate:</label>\n          {/* <input type=\"text\" value={this.state.flowrate} onChange={this.handleChange} /> */}\n          <input name='flowRate' value={this.state.flowrate} onChange={this.handleChange} />\n          <br></br>\n          <br></br>\n        <input type=\"submit\" value=\"Submit\" />\n        </div>\n      </form>\n     \n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <FrontPage />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/erinroulston/capstone-app/src/App.js",[],[],["37","38"],"/Users/erinroulston/capstone-app/src/reportWebVitals.js",[],[],"/Users/erinroulston/fydp-neofeed/capstone-app/src/index.js",["39","40"],[],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport background from './background.png';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nconst initialValues = {\n    stomachPressure:\"\",\n    flowrate:\"\"\n};\n\nvar sectionStyle = {\n  width: \"100%\",\n  height: \"400\",\n  backgroundImage: `url( ${ background })`\n};\n\nvar textStyle = {\nposition: 'absolute',\njustifyContent: 'center', \nalignItems: 'center',\ntop: 0,\nleft: 0,\nright: 0,\nbottom: 0\n};\n\nclass FrontPage extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {value:'', flowRate:''};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    const {value, flowRate} = this.state\n    event.preventDefault()\n    alert(`Stomach pressure submitted: ${value}psi\\nFlow Rate submitted: ${flowRate}ml/min`);\n  }\n\n  handleChange(event){\n    this.setState({[event.target.name]:event.target.value\n    })\n  }\n\n  render() {\n    return (\n        <form onSubmit={this.handleSubmit}>\n        <section style={ sectionStyle }></section>\n             <br></br>\n          <div>\n        <label>Enter baby stomach pressure:</label>\n          <input name='value'  value={this.state.value} onChange={this.handleChange} />\n          <label>psi</label>\n        </div>\n        <br></br>\n        <br></br>\n        <div>\n        <label>Enter feed flow rate:</label>\n          <input name='flowRate' value={this.state.flowrate} onChange={this.handleChange} />\n          <label>ml/min</label>\n          <br></br>\n          <br></br>\n        <input type=\"submit\" value=\"Submit\" />\n        </div>\n      </form>\n    ); \n  }\n}\n\nReactDOM.render(\n  <FrontPage />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/erinroulston/fydp-neofeed/capstone-app/src/reportWebVitals.js",[],[],"/Users/erinroulston/fydp-neofeed/capstone-app/src/App.js",[],[],{"ruleId":"41","severity":1,"message":"42","line":14,"column":7,"nodeType":"43","messageId":"44","endLine":14,"endColumn":20},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"41","severity":1,"message":"42","line":15,"column":7,"nodeType":"43","messageId":"44","endLine":15,"endColumn":20},{"ruleId":"41","severity":1,"message":"49","line":26,"column":5,"nodeType":"43","messageId":"44","endLine":26,"endColumn":14},"no-unused-vars","'initialValues' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["50"],"no-negated-in-lhs",["51"],"'textStyle' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]